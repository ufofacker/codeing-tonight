let utils = require ('../../utils');
const bindTextToElement = utils.bindTextToElement;
//${bindTextToElement ('')}
module.exports = {
  list: [
    {
      label: '1.V8执行Javascript代码的过程',
      content: `${bindTextToElement ('①生成抽象语法树')}：这个阶段需要经过词法分析和语法分析。词法分析过程，JS编译器将每一行代码拆分成一个个token（指的是语法上不可再分的最小的单个字符或字符串）。语法分析，这个阶段是将词法分析生成的token数据，根据语法规则转换成AST（抽象语法树），如果源码不符合语法规则，这一步就会抛出“语法错误”。</br>` +
        `${bindTextToElement ('②生成字节码')}：字节码是介于AST和机器码之间的一种代码，但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码之后才能执行，由于机器码占用的内存空间要远大于字节码，因此使用字节码可以减少系统的内存使用。</br>` +
        `${bindTextToElement ('③执行代码')}：解释器在解释执行字节码的期间，收集代码信息，并判断是否有代码会被重复执行多次，如果会就被标记为热点代码，并将其转换为机器码，保存起来，下次执行时直接使用转换好的机器码，这一过程将代码标记为热代码，然后编译后保存执行机器码的过程我们称为即时编译（JIT）。</br>` +
        `在V8执行的过程中，我们会发现基于JIT（即时编译），V8的执行效率往往和执行时间成正比。</br>`,
    },
  ],
};
